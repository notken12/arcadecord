# Run `eval $(minikube docker-env)` to enable using local Docker images
# Run `docker compose build` to build the images
# Then run `kubectl apply -f kubectl.yaml` to apply this config
#
# Make sure to run `minikube tunnel` to expose to localhost!!

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config
  namespace: ingress-nginx
data:
  error-log-level: 'debug'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sharding
data:
  totalShards: '2'
  shardManagerCount: '2'
  shardManagerPodPrefix: 'shardmanager-'
  shardManagerPodAddress: 'http://shardmanager-%ID%.shardmanager.default.svc.cluster.local:3000'
  gameServerUrlInternal: 'http://gameserver:3000'
---
apiVersion: v1
kind: Secret
metadata:
  name: sharding
type: Opaque
data:
  botIpcToken: 'N3NGcDBBU0tia01BNFA4Q0pJYjZsY0Nyd0tBNjJvYjI2R0dNSzA0dmZUN2RrNXJWMnhhUGRKM3F0c3dQ'
---
# BEGIN WEB CONFIG
apiVersion: v1
kind: ConfigMap
metadata:
  name: web
data:
  port: '5000'
  id: '0'
  name: mosog
  url: 'http://mogo.gov'
  gameServerUrl: 'https://api.mogo.gov'
---
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
# Environment variables using metadata: https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  labels:
    app: web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: web
          image: arcadecord_web
          imagePullPolicy: Never
          ports:
            - containerPort: 5000
              name: http-web-svc
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: http-web-svc
          #   initialDelaySeconds: 5
          #   periodSeconds: 1
          env:
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: port
            - name: WEB_HOST_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # use pod's name
            - name: WEB_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # use pod's name
            - name: WEB_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: url
            - name: VITE_GAME_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: gameServerUrl
            - name: TOTAL_SHARDS
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: totalShards
            - name: SHARD_MANAGER_COUNT
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerCount
            - name: SHARD_MANAGER_POD_PREFIX
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerPodPrefix
            - name: SHARD_MANAGER_POD_ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerPodAddress
            - name: BOT_IPC_TOKEN
              valueFrom:
                secretKeyRef:
                  name: sharding
                  key: botIpcToken
---
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    app: web
spec:
  ports:
    - port: 5000
      protocol: TCP
      targetPort: http-web-svc
  selector:
    app: web
  type: NodePort
  sessionAffinity: None
# END WEB CONFIG
---
# BEGIN GAMESERVER CONFIG
apiVersion: v1
kind: ConfigMap
metadata:
  name: gameserver
data:
  port: '3000'
  name: mosoggame
  id: '1'
---
apiVersion: v1
kind: Secret
metadata:
  name: gameserver
type: Opaque
data:
  gameServerToken: 'TlJ5amdZb0t3TWtSNlhCZ1ZMQk13bkVIVHl4ZjI5YzdDVXRiTXZ1T1UwYlNSNG1Ba3hxbUdhbFhqWUZE'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gameserver
  labels:
    app: gameserver
spec:
  replicas: 3
  selector:
    matchLabels:
      app: gameserver
  template:
    metadata:
      labels:
        app: gameserver
    spec:
      containers:
        - name: gameserver
          image: arcadecord_gameserver
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
              name: http-ws-gs-svc
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: http-ws-gs-svc
          #   initialDelaySeconds: 5
          #   periodSeconds: 1
          env:
            - name: GAME_SERVER_HOST_PORT
              valueFrom:
                configMapKeyRef:
                  name: gameserver
                  key: port
            - name: GAME_SERVER_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # use pod's name
            - name: GAME_SERVER_HOST_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # use pod's name
            - name: WEB_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: url
            - name: TOTAL_SHARDS
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: totalShards
            - name: SHARD_MANAGER_COUNT
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerCount
            - name: SHARD_MANAGER_POD_PREFIX
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerPodPrefix
            - name: SHARD_MANAGER_POD_ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerPodAddress
            - name: BOT_IPC_TOKEN
              valueFrom:
                secretKeyRef:
                  name: sharding
                  key: botIpcToken
            - name: GAME_SERVER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: gameserver
                  key: gameServerToken
            - name: DEBUG
              value: '*'
---
apiVersion: v1
kind: Service
metadata:
  name: gameserver
  labels:
    app: gameserver
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http-ws-gs-svc
  selector:
    app: gameserver
  type: NodePort
# END GAMESERVER CONFIG
---
# BEGIN SHARDMANAGER CONFIG
apiVersion: v1
kind: ConfigMap
metadata:
  name: shardmanager
---
apiVersion: v1
kind: Service
metadata:
  name: shardmanager
  labels:
    app: shardmanager
spec:
  ports:
    - port: 3000
      name: http-shardm-svc
  clusterIP: None
  selector:
    app: shardmanager
---
# Access each pod with hostname shardmanager-{N}.
# shardmanager-0, shardmanager-1
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: shardmanager
spec:
  serviceName: 'shardmanager'
  replicas: 2
  selector:
    matchLabels:
      app: shardmanager
  template:
    metadata:
      labels:
        app: shardmanager
    spec:
      containers:
        - name: shardmanager
          image: arcadecord_shardmanager
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
              name: http-shardm-svc
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # use pod's name
            - name: TOTAL_SHARDS
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: totalShards
            - name: SHARD_MANAGER_COUNT
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerCount
            - name: SHARD_MANAGER_POD_PREFIX
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerPodPrefix
            - name: BOT_IPC_TOKEN
              valueFrom:
                secretKeyRef:
                  name: sharding
                  key: botIpcToken
            - name: GAME_SERVER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: gameserver
                  key: gameServerToken
            - name: VITE_GAME_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: gameServerUrl
            - name: GAME_SERVER_URL_INTERNAL
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: gameServerUrlInternal
            - name: WEB_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: url
# END SHARDMANAGER CONFIG
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  rules:
    - host: mogo.gov
      http:
        paths:
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: web
                port:
                  name: http-web-svc
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gameserver-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/session-cookie-secure: 'false'
    nginx.ingress.kubernetes.io/session-cookie-path: '/'
    nginx.ingress.kubernetes.io/session-cookie-samesite: 'None'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '3600'
    nginx.ingress.kubernetes.io/proxy-send-timeout: '3600'
    nginx.ingress.kubernetes.io/proxy-redirect-from: 'off'
    # nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    # nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/enable-cors: 'true'
    nginx.ingress.kubernetes.io/cors-allow-credentials: 'true'
    nginx.ingress.kubernetes.io/cors-allow-methods: 'PUT, GET, POST,
      OPTIONS, DELETE, PATCH'
    nginx.ingress.kubernetes.io/cors-allow-origin: 'http://*.mogo.gov, https://*.mogo.gov, http://mogo.gov, https://mogo.gov'
    nginx.ingress.kubernetes.io/proxy-http-version: '1.1'
    nginx.ingress.kubernetes.io/server-snippets: |
      location / {
        more_set_headers "Access-Control-Allow-Origin: $http_origin";
        # proxy_pass http://127.0.0.1:3000;
        # proxy_redirect off;
        proxy_pass_request_headers on;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
      }
    nginx.org/websocket-services: 'gameserver'
    nginx.ingress.kubernetes.io/websocket-services: 'gameserver'
    nginx.ingress.kubernetes.io/proxy-ssl-server-name: 'true'
    nginx.ingress.kubernetes.io/proxy-ssl-name: 'true'
spec:
  tls:
    - hosts:
        - api.mogo.gov
        # assumes that tls-secret exists and the SSL
        # certificate contains a common name for api.mogo.gov
      secretName: tls-secret
  rules:
    - host: api.mogo.gov
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gameserver
                port:
                  name: http-ws-gs-svc
