# Run `eval $(minikube docker-env)` to enable using local Docker images
# Run `docker compose build` to build the images
# Then run `kubectl apply -f kubectl.yaml` to apply this config
#
# Make sure to run `minikube tunnel` to expose to localhost!!

apiVersion: v1
kind: ConfigMap
metadata:
  name: sharding
data:
  totalShards: '2'
  shardManagerCount: '2'
  shardManagerPodPrefix: 'shardmanager-'
  shardManagerPodAddress: 'http://shardmanager-%ID%.shardmanager.default.svc.cluster.local:3000'
  botIpcToken: '7sFp0ASKbkMA4P8CJIb6lcCrwKA62ob26GGMK04vfT7dk5rV2xaPdJ3qtswP'
  gameServerUrlInternal: 'http://gameserver:5000'
---
# BEGIN WEB CONFIG
apiVersion: v1
kind: ConfigMap
metadata:
  name: web
data:
  port: '3000'
  id: '0'
  name: mosog
  url: '127.0.0.1:3000'
  gameServerUrl: '127.0.0.1:5000'
---
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
# Environment variables using metadata: https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  labels:
    app: web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: web
          image: arcadecord_web
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
              name: http-web-svc
          env:
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: port
            - name: WEB_HOST_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # use pod's name
            - name: WEB_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # use pod's name
            - name: WEB_HOST_URL
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: url
            - name: VITE_GAME_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: gameServerUrl
---
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    app: web
spec:
  ports:
    - nodePort: 30001
      port: 3000
      protocol: TCP
      targetPort: http-web-svc
  selector:
    app: web
  type: LoadBalancer
# END WEB CONFIG
---
# BEGIN GAMESERVER CONFIG
apiVersion: v1
kind: ConfigMap
metadata:
  name: gameserver
data:
  port: '5000'
  name: mosoggame
  id: '1'
  webUrl: '127.0.0.1:3000'
  gameServerToken: 'NRyjgYoKwMkR6XBgVLBMwnEHTyxf29c7CUtbMvuOU0bSR4mAkxqmGalXjYFD'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gameserver
  labels:
    app: gameserver
spec:
  replicas: 3
  selector:
    matchLabels:
      app: gameserver
  template:
    metadata:
      labels:
        app: gameserver
    spec:
      containers:
        - name: gameserver
          image: arcadecord_gameserver
          imagePullPolicy: Never
          ports:
            - containerPort: 5000
              name: http-ws-gs-svc
          env:
            - name: GAME_SERVER_HOST_PORT
              valueFrom:
                configMapKeyRef:
                  name: gameserver
                  key: port
            - name: GAME_SERVER_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # use pod's name
            - name: GAME_SERVER_HOST_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # use pod's name
            - name: WEB_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: url
            - name: TOTAL_SHARDS
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: totalShards
            - name: SHARD_MANAGER_COUNT
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerCount
            - name: SHARD_MANAGER_POD_PREFIX
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerPodPrefix
            - name: SHARD_MANAGER_POD_ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerPodAddress
            - name: BOT_IPC_TOKEN
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: botIpcToken
            - name: GAME_SERVER_TOKEN
              valueFrom:
                configMapKeyRef:
                  name: gameserver
                  key: gameServerToken
---
apiVersion: v1
kind: Service
metadata:
  name: gameserver
  labels:
    app: gameserver
spec:
  ports:
    - nodePort: 30002
      port: 5000
      protocol: TCP
      targetPort: http-ws-gs-svc
  selector:
    app: gameserver
  type: LoadBalancer
# END GAMESERVER CONFIG
---
# BEGIN SHARDMANAGER CONFIG
apiVersion: v1
kind: ConfigMap
metadata:
  name: shardmanager
---
apiVersion: v1
kind: Service
metadata:
  name: shardmanager
  labels:
    app: shardmanager
spec:
  ports:
    - port: 3000
      name: http-shardm-svc
  clusterIP: None
  selector:
    app: shardmanager
---
# Access each pod with hostname shardmanager-{N}.
# shardmanager-0, shardmanager-1
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: shardmanager
spec:
  serviceName: 'shardmanager'
  replicas: 2
  selector:
    matchLabels:
      app: shardmanager
  template:
    metadata:
      labels:
        app: shardmanager
    spec:
      containers:
        - name: shardmanager
          image: arcadecord_shardmanager
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
              name: http-shardm-svc
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # use pod's name
            - name: TOTAL_SHARDS
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: totalShards
            - name: SHARD_MANAGER_COUNT
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerCount
            - name: SHARD_MANAGER_POD_PREFIX
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: shardManagerPodPrefix
            - name: BOT_IPC_TOKEN
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: botIpcToken
            - name: GAME_SERVER_TOKEN
              valueFrom:
                configMapKeyRef:
                  name: gameserver
                  key: gameServerToken
            - name: VITE_GAME_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: gameServerUrl
            - name: GAME_SERVER_URL_INTERNAL
              valueFrom:
                configMapKeyRef:
                  name: sharding
                  key: gameServerUrlInternal
            - name: WEB_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: web
                  key: url
# END SHARDMANAGER CONFIG
